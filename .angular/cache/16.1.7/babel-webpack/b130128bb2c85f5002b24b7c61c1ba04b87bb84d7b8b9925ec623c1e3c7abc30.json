{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst baseURL = 'http://127.0.0.1:8000/api/items';\n// const baseURL = \"https://jsonplaceholder.typicode.com/todos\";\nexport class DataService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.items = [];\n  }\n  getItems() {\n    return this.httpClient.get(baseURL).toPromise().then(response => response);\n  }\n  deleteItem(id) {\n    return this.httpClient.delete(baseURL + '/' + id).toPromise().then(response => response);\n  }\n  addItem(item) {\n    console.log(JSON.stringify(item));\n    return this.httpClient.post(baseURL, JSON.stringify(item)).toPromise().then(response => response);\n  }\n  findItem(id) {\n    return this.httpClient.get(baseURL + '/' + id + '/edit').toPromise().then(response => response);\n  }\n  updateItem(id, item) {\n    console.log(baseURL + '/' + id);\n    console.log(JSON.stringify(item));\n    return this.httpClient.put(baseURL + '/' + id, JSON.stringify(item)).subscribe(response => {\n      console.log('Server response:', response);\n    }, error => {\n      console.error('Error:', error);\n    });\n    // return this.httpClient\n    // .put(baseURL + '/' + id, JSON.stringify(item)).toPromise()\n    // .then((response: any) => response);\n  }\n}\n\nDataService.ɵfac = function DataService_Factory(t) {\n  return new (t || DataService)(i0.ɵɵinject(i1.HttpClient));\n};\nDataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DataService,\n  factory: DataService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["baseURL","DataService","constructor","httpClient","items","getItems","get","toPromise","then","response","deleteItem","id","delete","addItem","item","console","log","JSON","stringify","post","findItem","updateItem","put","subscribe","error","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/var/www/html/PLI/angular-crud-app/src/app/data.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nconst baseURL = 'http://127.0.0.1:8000/api/items';\n// const baseURL = \"https://jsonplaceholder.typicode.com/todos\";\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataService {\n  private items: any[] = [];\n\n  constructor(private httpClient: HttpClient) { }\n\n  getItems(): any {\n    return this.httpClient\n    .get(baseURL).toPromise()\n    .then((response: any) => response);\n  }\n\n  deleteItem(id : any) {\n    return this.httpClient\n    .delete(baseURL + '/' + id).toPromise()\n    .then((response: any) => response);\n  }\n\n  addItem(item: any) {\n    console.log(JSON.stringify(item));\n    return this.httpClient\n    .post(baseURL, JSON.stringify(item)).toPromise()\n    .then((response: any) => response);\n  }\n\n  findItem(id : any) {\n    return this.httpClient\n    .get(baseURL + '/' + id + '/edit').toPromise()\n    .then((response: any) => response);\n  }\n\n  updateItem(id : any, item : any) {\n    console.log(baseURL + '/' + id);\n      console.log(JSON.stringify(item));\n    return this.httpClient.put(baseURL + '/' + id, JSON.stringify(item)).subscribe(\n        response => {\n          console.log('Server response:', response);\n        },\n        error => {\n          console.error('Error:', error);\n        }\n      );\n    // return this.httpClient\n    // .put(baseURL + '/' + id, JSON.stringify(item)).toPromise()\n    // .then((response: any) => response);\n  }\n}\n"],"mappings":";;AAGA,MAAMA,OAAO,GAAG,iCAAiC;AACjD;AAIA,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,UAAsB;IAAtB,KAAAA,UAAU,GAAVA,UAAU;IAFtB,KAAAC,KAAK,GAAU,EAAE;EAEqB;EAE9CC,QAAQA,CAAA;IACN,OAAO,IAAI,CAACF,UAAU,CACrBG,GAAG,CAACN,OAAO,CAAC,CAACO,SAAS,EAAE,CACxBC,IAAI,CAAEC,QAAa,IAAKA,QAAQ,CAAC;EACpC;EAEAC,UAAUA,CAACC,EAAQ;IACjB,OAAO,IAAI,CAACR,UAAU,CACrBS,MAAM,CAACZ,OAAO,GAAG,GAAG,GAAGW,EAAE,CAAC,CAACJ,SAAS,EAAE,CACtCC,IAAI,CAAEC,QAAa,IAAKA,QAAQ,CAAC;EACpC;EAEAI,OAAOA,CAACC,IAAS;IACfC,OAAO,CAACC,GAAG,CAACC,IAAI,CAACC,SAAS,CAACJ,IAAI,CAAC,CAAC;IACjC,OAAO,IAAI,CAACX,UAAU,CACrBgB,IAAI,CAACnB,OAAO,EAAEiB,IAAI,CAACC,SAAS,CAACJ,IAAI,CAAC,CAAC,CAACP,SAAS,EAAE,CAC/CC,IAAI,CAAEC,QAAa,IAAKA,QAAQ,CAAC;EACpC;EAEAW,QAAQA,CAACT,EAAQ;IACf,OAAO,IAAI,CAACR,UAAU,CACrBG,GAAG,CAACN,OAAO,GAAG,GAAG,GAAGW,EAAE,GAAG,OAAO,CAAC,CAACJ,SAAS,EAAE,CAC7CC,IAAI,CAAEC,QAAa,IAAKA,QAAQ,CAAC;EACpC;EAEAY,UAAUA,CAACV,EAAQ,EAAEG,IAAU;IAC7BC,OAAO,CAACC,GAAG,CAAChB,OAAO,GAAG,GAAG,GAAGW,EAAE,CAAC;IAC7BI,OAAO,CAACC,GAAG,CAACC,IAAI,CAACC,SAAS,CAACJ,IAAI,CAAC,CAAC;IACnC,OAAO,IAAI,CAACX,UAAU,CAACmB,GAAG,CAACtB,OAAO,GAAG,GAAG,GAAGW,EAAE,EAAEM,IAAI,CAACC,SAAS,CAACJ,IAAI,CAAC,CAAC,CAACS,SAAS,CAC1Ed,QAAQ,IAAG;MACTM,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEP,QAAQ,CAAC;IAC3C,CAAC,EACDe,KAAK,IAAG;MACNT,OAAO,CAACS,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;IAChC,CAAC,CACF;IACH;IACA;IACA;EACF;;;AA5CWvB,WAAW,C;mBAAXA,WAAW,EAAAwB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAX3B,WAAW,C;SAAXA,WAAW;EAAA4B,OAAA,EAAX5B,WAAW,CAAA6B,IAAA;EAAAC,UAAA,EAFV;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}