{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst baseURL = 'http://127.0.0.1:8000/api/items';\n// const baseURL = \"https://jsonplaceholder.typicode.com/todos\";\nexport class DataService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.items = [];\n  }\n  getItems() {\n    return this.httpClient.get(baseURL).toPromise().then(response => response);\n  }\n  delete(id) {\n    return this.httpClient.delete(this.baseURL + id, this.httpOptions).pipe(catchError(this.errorHandler));\n  }\n  addItem(item) {\n    this.items.push(item);\n  }\n}\nDataService.ɵfac = function DataService_Factory(t) {\n  return new (t || DataService)(i0.ɵɵinject(i1.HttpClient));\n};\nDataService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: DataService,\n  factory: DataService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["baseURL","DataService","constructor","httpClient","items","getItems","get","toPromise","then","response","delete","id","httpOptions","pipe","catchError","errorHandler","addItem","item","push","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/var/www/html/PLI/angular-crud-app/src/app/data.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\n\nconst baseURL = 'http://127.0.0.1:8000/api/items';\n// const baseURL = \"https://jsonplaceholder.typicode.com/todos\";\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataService {\n  private items: any[] = [];\n\n  constructor(private httpClient: HttpClient) { }\n\n  getItems(): any {\n    return this.httpClient\n    .get(baseURL).toPromise()\n    .then((response: any) => response);\n  }\n\n  delete(id){\n    return this.httpClient.delete(this.baseURL + id, this.httpOptions)\n    .pipe(\n      catchError(this.errorHandler)\n    )\n  }\n\n  addItem(item: any) {\n    this.items.push(item);\n  }\n\n\n  // updateItem(updatedItem: any) {\n  //   const index = this.items.findIndex(item => item.id === updatedItem.id);\n  //   if (index !== -1) {\n  //     this.items[index] = updatedItem;\n  //   }\n  // }\n\n  // deleteItem(id: number) {\n  //   this.items = this.items.filter(item => item.id !== id);\n  // }\n}\n"],"mappings":";;AAGA,MAAMA,OAAO,GAAG,iCAAiC;AACjD;AAIA,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,UAAsB;IAAtB,KAAAA,UAAU,GAAVA,UAAU;IAFtB,KAAAC,KAAK,GAAU,EAAE;EAEqB;EAE9CC,QAAQA,CAAA;IACN,OAAO,IAAI,CAACF,UAAU,CACrBG,GAAG,CAACN,OAAO,CAAC,CAACO,SAAS,EAAE,CACxBC,IAAI,CAAEC,QAAa,IAAKA,QAAQ,CAAC;EACpC;EAEAC,MAAMA,CAACC,EAAE;IACP,OAAO,IAAI,CAACR,UAAU,CAACO,MAAM,CAAC,IAAI,CAACV,OAAO,GAAGW,EAAE,EAAE,IAAI,CAACC,WAAW,CAAC,CACjEC,IAAI,CACHC,UAAU,CAAC,IAAI,CAACC,YAAY,CAAC,CAC9B;EACH;EAEAC,OAAOA,CAACC,IAAS;IACf,IAAI,CAACb,KAAK,CAACc,IAAI,CAACD,IAAI,CAAC;EACvB;;AApBWhB,WAAW,C;mBAAXA,WAAW,EAAAkB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAXrB,WAAW,C;SAAXA,WAAW;EAAAsB,OAAA,EAAXtB,WAAW,CAAAuB,IAAA;EAAAC,UAAA,EAFV;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}